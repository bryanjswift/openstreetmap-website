var over_map;
var links_map;
var overlay_control;
var links_overlay_control;

$(document).ready(function() {

  var story_overlays = {
    <% overlays = Tile.overlays
      overlays.each do | tile | 
      comma = "," unless (tile==overlays.last) %>
      "<%= tile.keyid %>" : new L.Site.<%= tile.keyid.capitalize %>()<%= comma %>
    <% end %>
  };
    
    
  function update_layers_status(e){
    map_layers = over_map._layers;
    var layers_on = [];
    for (var key in map_layers){
      layers_on.push(map_layers[key].options.name);
    }
    $("#story_layers_status").val(layers_on.join(","))
  
  }

  function onOverMapMove(e){
    var lat = over_map.getCenter().lat;
    var lng = over_map.getCenter().lng;
    var zoom = over_map.getZoom();
    
    $("#latitude").val(lat);
    $("#longitude").val(lng);
    $("#zoom").val(zoom);

  }
  
 
  function setUpMap() {
    $("#initial_map").show();

    var params = $("#initial_map").data();
    var centre = [params.lat, params.lon];
    var position = $('html').attr('dir') === 'rtl' ? 'topleft' : 'topright';

    over_map = L.map("initial_map", {
      attributionControl: false,
      zoomControl: false
    });

    <% base_layers = Tile.base_layers
    base_layers.each do | tile | %>
      over_map.addLayer(new L.Site.<%= tile.keyid.capitalize %>());
    <% end %>

    overlay_control = new L.control.layers({}, story_overlays, {"position":"bottomright", "collapsed":false})
    overlay_control.addTo(over_map);

    L.OSM.zoom({position: position}).addTo(over_map);

    over_map.setView(centre, params.zoom);
    over_map.on('moveend', onOverMapMove);

    over_map.on('overlayremove', update_layers_status);
    over_map.on('overlayadd', update_layers_status);
  }

  
  
  $("#story_layers").change(function(){
    var layers = []
    
    $("#story_layers option:selected").each(function(){
      layers.push($(this).val());
    });
    
    for (var key in story_overlays) {
      over_map.removeLayer(story_overlays[key]);    
      overlay_control.removeLayer(story_overlays[key]);     
    }

    for (var key in story_overlays) {
      if (layers.indexOf(key) != -1){
        story_overlays[key].addTo(over_map);
        overlay_control.addOverlay(story_overlays[key], key);
      }
    }
    
    update_layers_status();

  });
  
  
  $('#story_link_button').click( function(e){
    add_link();
  });

  $('#section_link_button').click( function(e){
    add_section_link();
  });

  
  setUpMap();
  $("#story_layers").change();
  
  $(".link_input").each(function(){
    $(this).focus(function(e){
      link_modal(this);
    });
    
  })
  
  $("input.delete_section_button").each(function(){
      $(this).click(function(e){
      if (confirm('Are you sure?')){
          $(this).parent().remove();
        };
       });
  });
   $("input.delete_link_button").each(function(){
      $(this).click(function(e){
        if (confirm('Are you sure?')){
          $(this).parent().remove();
        };
       });
  });

});  //document.ready

function setUpLinksMap(hash){

  var params, centre, zoom;

  if (hash != ""){
    hash_ary = hash.replace(/[A-Za-z]|=|,|&/gi, "").split("/")
    centre = [hash_ary[1], hash_ary[2]];
    zoom = hash_ary[0];
  } else{ 
    params = $("#initial_map").data();
    centre = [params.lat, params.lon];
    zoom = params.zoom;
  }
  
  var position = $('html').attr('dir') === 'rtl' ? 'topleft' : 'topright';

  links_map = L.map("links_map", {
    attributionControl: false,
    zoomControl: false
  });

  var story_overlays = {
    <% overlays = Tile.overlays
      overlays.each do | tile | 
      comma = "," unless (tile==overlays.last) %>
      "<%= tile.keyid %>" : new L.Site.<%= tile.keyid.capitalize %>()<%= comma %>
    <% end %>
  };
  
  <% base_layers = Tile.base_layers
  base_layers.each do | tile | %>
    links_map.addLayer(new L.Site.<%= tile.keyid.capitalize %>());
  <% end %>
    

  L.OSM.zoom({position: position}).addTo(links_map);
  links_map.setView(centre, zoom);

  links_overlay_control = new L.control.layers({}, {}, {"position":"bottomright", "collapsed":false})
  links_overlay_control.addTo(links_map);
  
  var overlays = $("#story_layers").val();
  if (overlays && overlays.length > 1){
    for (var key in story_overlays) {
      if (overlays.indexOf(key) != -1){
        var overlay = story_overlays[key]
        overlay.addTo(links_map);
        links_overlay_control.addOverlay(overlay, key);
      };
    };
  };

}



function link_modal(ele){
 
  var val = $(ele).val();
  $( "#links_map_box").modal({
        onShow: function (dialog){
          setUpLinksMap(val);
        },
        onClose: function(dialog){
          var hash = map_hash;
          $(ele).val(hash);
          $.modal.close();
        }
    });
}

// OSM scheme 7/-3.618/21.797&layers=B
function map_hash(){
  var lat = links_map.getCenter().lat.toFixed(5);
  var lng = links_map.getCenter().lng.toFixed(5);
  var zoom = links_map.getZoom();
  var map_layers = links_map._layers;
  var layers = [];
  for (var key in map_layers){
    layers.push(map_layers[key].options.code);
  }

  var link = "map="+zoom+"/"+lat+"/"+lng+"&layers="+layers.join(",");

  return link;
}
  
function add_link(){
  var story_link = $("#story_link_template .story_link").clone();
  $("#story_links").append(story_link);
  $(".link_input", story_link).focus(function(e){
    link_modal(this);
  });
  
   $("input.delete_link_button", story_link).click(function(e){
        if (confirm('Are you sure?')){
          $(this).parent().remove();
        };
  });

}


function add_section_link(){
    var section_link = $("#section_link_template .section").clone();
    $(".sections_report").append(section_link);
    $(".link_input", section_link).focus(function(e){
      link_modal(this);
    });
     $("input.delete_section_button", section_link).click(function(e){
      if (confirm('Are you sure?')){
          $(this).parent().remove();
        };
  });

}
